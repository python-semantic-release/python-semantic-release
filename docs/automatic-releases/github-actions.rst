.. _github-actions:

Python Semantic Release GitHub Action
=====================================

Python Semantic Release includes a GitHub Action which runs the ``version`` and
``publish`` commands. The repository is set to ``PyPI``. You can read the full set
of inputs available, and their descriptions in the `action definition`_.

.. _action definition: https://github.com/python-semantic-release/python-semantic-release/blob/master/action.yml

Your project's configuration file will be used as normal.

In order to use Python Semantic Release to create GitHub Releases against
your repository, you will need to allow the following permissions for the
token generated by GitHub for each job:

* id-token: write
* contents: write

This can be done using the `permissions`_ block in your workflow definition.

.. _permissions: https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idpermissions

Configuring the action can be done in your workflow's YAML definition.
The action provides the following inputs:

Inputs
------

Tokens
^^^^^^
.. _action-github-token:

``github_token``
""""""""""""""""

The GitHub token used to push release notes and new commits/tags.

required: false

Custom Users
^^^^^^^^^^^^

.. _action-git-committer-name:

``git_committer_name``
""""""""""""""""""""""

The name of the account used to commit. If customized, it must be associated with the provided token.

default: ``github-actions``

required: false

.. _action-git-committer-email:

``git_committer_email``
"""""""""""""""""""""""

The email of the account used to commit. If customized, it must be associated with the provided token.

default: ``actions@github.com>``

required: false

.. _action-ssh-public-signing-key:

``ssh_public_signing_key``
""""""""""""""""""""""""""

The public key used to verify a commit. If customized, it must be associated with the same account as the provided token.

required: false

.. _action-ssh-private-signing-key:

``ssh_private_signing_key``
"""""""""""""""""""""""""""

The private key used to verify a commit. If customized, it must be associated with the same account as the provided token.

required: false

Additional Options
^^^^^^^^^^^^^^^^^^

.. _action-directory:

``directory``
"""""""""""""

Sub-directory to cd into before running semantic-release

required: false

.. _action-root-options:

``root_options``
""""""""""""""""""""""

Additional options for the main ``semantic-release`` command. Example: ``-vv --noop``

required: false

default: ``-v``

Command Line Options
--------------------

Other inputs which supply additional command-line options to the
:ref:`version <cmd-version>` command can be optionally supplied, and have the same
defaults as their corresponding command line option.

In general, the input for an action corresponding to a command line option has the same
name, with dashes (``-``) replaced by underscores.

The command line arguments ``--prerelease``, ``--patch``, ``--minor`` and ``--major``
are mutually exclusive, and are supplied via the ``force`` input.

Flags, which require either ``--<option>`` or ``--no-<option>`` to be passed on the
command-line, should be specified using the option name (with dashes replaced by
underscores), and set to the value ``"true"`` to supply ``--<option>`` on the
command-line, and ``"false"`` to specify ``--no-<option>``.
Any other values are not accepted.

The flag ``--as-prerelease`` is uniquely provided as just the ``prerelease`` flag value.
This is for compatibility reasons.

For command line options requiring a value, set the input to the required value.

For example, to specify ``--patch --no-push --build-metadata abc123``, you should
provide the following inputs:

.. code:: yaml

   ---

   # ... the rest of the workflow
   - name: Python Semantic Release
     # Adjust tag with desired version if applicable. Version shorthand
     # is NOT available, e.g. vX or vX.X will not work.
     uses: python-semantic-release/python-semantic-release@v9.8.7
     with:
       # ... other options
       force: "patch"
       push: "false"
       build_metadata: "abc123"

Outputs
-------

+-------------+-----------------------------------------------------------+
| Output      | Description                                               |
+-------------+-----------------------------------------------------------+
| released    | "true" if a release was made, "false" otherwise           |
+-------------+-----------------------------------------------------------+
| version     | The newly released version if one was made, otherwise     |
|             | the current version                                       |
+-------------+-----------------------------------------------------------+
| tag         | The Git tag corresponding to the "version" output. The    |
|             | format is dictated by your configuration.                 |
+-------------+-----------------------------------------------------------+

Example Workflow
----------------

.. code:: yaml

    name: Semantic Release

    on:
      push:
        branches:
          - master

    jobs:
      release:
        runs-on: ubuntu-latest
        concurrency: release
        permissions:
          id-token: write
          contents: write

        steps:
          - uses: actions/checkout@v3
            with:
              fetch-depth: 0

          - name: Python Semantic Release
            # Adjust tag with desired version if applicable. Version shorthand
            # is NOT available, e.g. vX or vX.X will not work.
            uses: python-semantic-release/python-semantic-release@v9.8.9
            with:
              github_token: ${{ secrets.GITHUB_TOKEN }}

``concurrency`` is a `beta feature of GitHub Actions`_ which disallows two or more
release jobs to run in parallel. This prevents race conditions if there are multiple
pushes in a short period of time.

If you would like to use Python Semantic Release to create GitHub Releases against
your repository, you will need to allow the additional ``contents: write`` permission.
More information can be found in the `permissions for GitHub Apps documentation`_

.. _beta feature of GitHub Actions: https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idconcurrency
.. _permissions for GitHub Apps documentation: https://docs.github.com/en/rest/overview/permissions-required-for-github-apps?apiVersion=2022-11-28#contents

.. warning::
  You must set ``fetch-depth`` to 0 when using ``actions/checkout@v2``, since
  Python Semantic Release needs access to the full history to determine whether
  a release should be made.

.. warning::
  The ``GITHUB_TOKEN`` secret is automatically configured by GitHub, with the
  same permissions as the user who triggered the workflow run. This causes
  a problem if your default branch is protected.

  You can work around this by storing an administrator's Personal Access Token
  as a separate secret and using that instead of ``GITHUB_TOKEN``. In this
  case, you will also need to pass the new token to ``actions/checkout`` (as
  the ``token`` input) in order to gain push access.

Multiple Projects
-----------------

While ``python-semantic-release`` doesn't have full monorepo support, If you
have multiple projects stored within a single repository (or your project is
not at the root of the repository), you can pass the ``directory`` input. The
step can be called multiple times to release multiple projects.

.. code:: yaml

   - name: Release Project 1
     uses: python-semantic-release/python-semantic-release@v9.8.9
     with:
       directory: ./project1
       github_token: ${{ secrets.GITHUB_TOKEN }}

   - name: Release Project 2
     uses: python-semantic-release/python-semantic-release@v9.8.9
     with:
       directory: ./project2
       github_token: ${{ secrets.GITHUB_TOKEN }}
