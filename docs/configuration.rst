.. _configuration:

Configuration
*************

Configuration options can be given in three ways:

- ``setup.cfg`` file in a ``[semantic_release]`` section
- ``pyproject.toml`` file in a ``[tool.semantic_release]`` section
- ``-D`` option, like so::

    semantic-release <command> -D <option_name>=<option_value>

Each location has priority over the ones listed above it.


Releases
========

``branch``
----------
The branch to run releases from.

Default: `master`

``version_variable``
--------------------
The file and variable name of where the version number is stored, for example::

    semantic_release/__init__.py:__version__

``version_source``
------------------
The way we get and set the new version. Can be `commit` or `tag`.

- If set to `tag`, will get the current version from the latest tag matching ``vX.Y.Z``.
  This won't change the source defined in ``version_variable``.
- If set to `commit`, will get the current version from the source defined in
  ``version_variable``, edit the file and commit it.

Default: `commit`

``commit_parser``
-----------------
Import path of a Python function that can parse commit messages and return
information about the commit as described in :ref:`commit-log-parsing`.

Default: `semantic_release.history.angular_parser`

``patch_without_tag``
---------------------
If this is set to `true`, semantic-release will create a new patch release even if there is
no tag in any commits since the last release.

Default: `false`

Commits
=======

``commit_version_number``
-------------------------
Whether or not to commit changes when bumping version.

Default: True if ``version_source`` is `tag`, False if ``version_source`` is `commit`

``commit_subject``
------------------
Git commit subject line. Accepts the following variables as format fields:

================  ========
Variable          Contents
================  ========
``{version}``     The new version number in the format ``X.Y.Z``.
================  ========

Default: ``{version}``

``commit_message``
------------------
Git commit message body. Accepts the following variables as format fields:

================  ========
Variable          Contents
================  ========
``{version}``     The new version number in the format ``X.Y.Z``.
================  ========

Default: `Automatically generated by python-semantic-release`

``commit_author``
-----------------
Author used in commits in the format ``name <email>``.

Default: ``semantic-release <semantic-release>``

.. note::
  If you are using the built-in GitHub Action, this is always set to
  ``github-actions <actions@github.com>``.

Distributions
=============

``upload_to_pypi``
------------------
If set to false the pypi uploading will be disabled.

``upload_to_release``
---------------------
If set to false, do not upload distributions to GitHub releases.
If you are not using GitHub, this will be skipped regardless.

``dist_path``
-------------
The relative path to the folder for dists configured for setuptools. This allows for
customized setuptools processes.

Default: `dist/`

``remove_dist``
---------------
Flag for whether the dist folder should be removed after a release.

Default: `true`

``build_command``
-----------------
Command to build dists. Build output should be stored in the directory configured in
``dist_path``.

Default: ``python setup.py sdist bdist_wheel``

HVCS
====

``hvcs``
--------
The name of your hvcs. Currently only `GitHub` and `GitLab` are supported.

Default: `github`

``check_build_status``
----------------------
If enabled, the status of the head commit will be checked and a release will only be created
if the status is success.

Default: `false`
