.. _troubleshooting:

Troubleshooting
---------------
Things to check...

- Check setup.cfg for :ref:`configuration`
- Check all applicable :ref:`envvars`
- Git tags beginning with ``v``. This is, depending on configuration, used
  for getting the last version.

.. _debug-usage:

Showing debug output
^^^^^^^^^^^^^^^^^^^^
If you are having trouble with `semantic-release` there is a way to get more
information during it's work.

By setting the ``DEBUG`` environment variable you can get various amount of
information from the inner workings of semantic-release. The information is
often very undescriptive but could be very usefull together with the
source code of the project.


The examples show the bash syntax to set variable at the execution time.
If you want to do same id Windows Command Prompt
::

    SET DEBUG=*
    semantic-release changelog
    ...


For powershell
::

    $env:DEBUG='*'
    semantic-release changelog
    ...

For bash
::

    # '*' will show everything
    $ DEBUG='*' semantic-release changelog
    semantic-release changelog
    semantic_release:cli 'main args:' {'force_level': None, 'post': False, 'retry': False, 'noop': False} +0.0us
    semantic_release:cli 'main env:' 'GH_TOKEN="None",PYPI_USERNAME="None",PYPI_PASSWORD="None",' +2.0ms
    semantic_release:cli 'main config:' {'check_build_status': 'false', 'commit_message': 'Automatically generated by python-semantic-release', 'commit_parser': 'semantic_release.history.angular_parser', 'patch_without_tag': 'false', 'upload_to_pypi': 'true', 'version_source': 'commit'} +1.0ms
    semantic_release:history 'get_current_version_by_config_file' +0.0us
    semantic_release:history 'semantic_release/__init__.py' '__version__' +2.0ms
    semantic_release:history <_sre.SRE_Match object; span=(24, 45), match="__version__ = '4.1.0'"> +3.0ms
    semantic_release:cli 'changelog got current_version' '4.1.0' +10.0ms
    semantic_release:history 'get_previous_version' +3.0ms
    semantic_release:history 'checking commit 34a043ef844fb06c7fb954e85d3dcd7a60428c8a' +265.0ms
    semantic_release:history 'checking commit 13e7c786e876c57096b9efb7fdafdeb39c281710' +3.0ms
    semantic_release:history 'checking commit c5dbbc96ec073b939daae92da3e82ef411a17ccb' +2.0ms
    semantic_release:history 'found_version in "4.1.0\n\nAutomatically generated by python-semantic-release\n"' +2.0ms
    semantic_release:history 'checking commit bb352f5b6616cc42c9f2f2487c51dedda1c68295' +4.0ms
    semantic_release:history 'checking commit 9fc120d1a7e4acbbca609628e72651685108b364' +2.0ms
    semantic_release:history 'checking commit 9168d0ea56734319a5d77e890f23ff6ba51cc97d' +2.0ms
    semantic_release:history 'checking commit f008fdb9bcb727df7fb37402b3228dd38f3bc5ac' +2.0ms
    semantic_release:history 'version matches' '4.0.2\n\nAutomatically generated by python-semantic-release\n' +2.0ms
    semantic_release:cli 'changelog got previous_version' '4.0.2' +310.0ms
    semantic_release:history:logs 'generate_changelog("4.0.2", "4.1.0")' +0.0us
    semantic_release:history:logs 'Ignoring' UnknownCommitMessageStyleError('Unable to parse the given commit message: 4.1.0\n\nAutomatically generated by python-semantic-release\n',) +126.0ms
    semantic_release:history:parser_angular "parse_commit_message -> (0, documentation, readme, ('add testing instructions', '', ''))" +0.0us
    semantic_release:history:parser_angular "parse_commit_message -> (2, feature, ci_checks, ('add support for bitbucket', '', ''))" +3.0ms
    semantic_release:history:parser_angular "parse_commit_message -> (0, documentation, None, ('Add installation instructions for development (#106)', '', ''))" +2.0ms
    semantic_release:history:logs 'markdown_changelog(version="4.1.0", header=False, changelog=...)' +27.0ms
    ...


By changing the DEBUG variable to match the namespace you are interessted of
you can filter out things you do not want to see.

::

    # To only show the cli part use the following
    $ DEBUG="semantic_release:cli" semantic_release changelog
    semantic_release:cli 'main args:' {'force_level': None, 'post': False, 'retry': False, 'noop': False} +0.0us
    semantic_release:cli 'main env:' 'GH_TOKEN="None",PYPI_USERNAME="None",PYPI_PASSWORD="None",' +2.0ms
    semantic_release:cli 'main config:' {'check_build_status': 'false', 'commit_message': 'Automatically generated by python-semantic-release', 'commit_parser': 'semantic_release.history.angular_parser', 'patch_without_tag': 'false', 'upload_to_pypi': 'true', 'version_source': 'commit'} +2.0ms
    semantic_release:cli 'changelog got current_version' '4.1.0' +7.0ms
    semantic_release:cli 'changelog got previous_version' '4.0.2' +283.0ms
    ...

To get everything under history but nothing else...
::

    $ DEBUG="semantic_release:history:*" semantic_release changelog
    semantic_release:history:logs 'generate_changelog("4.0.2", "4.1.0")' +0.0us
    semantic_release:history:logs 'Ignoring' UnknownCommitMessageStyleError('Unable to parse the given commit message: 4.1.0\n\nAutomatically generated by python-semantic-release\n',) +91.0ms
    semantic_release:history:parser_angular "parse_commit_message -> (0, documentation, readme, ('add testing instructions', '', ''))" +0.0us
    semantic_release:history:parser_angular "parse_commit_message -> (2, feature, ci_checks, ('add support for bitbucket', '', ''))" +2.0ms
    semantic_release:history:parser_angular "parse_commit_message -> (0, documentation, None, ('Add installation instructions for development (#106)', '', ''))" +3.0ms
    semantic_release:history:logs 'markdown_changelog(version="4.1.0", header=False, changelog=...)' +9.0ms
    ...


For more detailed information on how to use the debug functionality
please have a look at https://pypi.org/project/ndebug/ which is the module
that is used for outputing the information.
