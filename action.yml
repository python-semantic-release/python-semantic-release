---
name: "Python Semantic Release"

description: "Automatic Semantic Versioning for Python projects"

inputs:
  root_options:
    description: "Additional options for the main command. Example: -vv --noop"
    required: false
    default: "-v"
  directory:
    description: "Sub-directory to cd into before running semantic-release"
    default: "."
    required: false
  github_token:
    description: "GitHub token used to push release notes and new commits/tags"
    required: true
  git_committer_name:
    description: "The human name for the “committer” field"
    default: "github-actions"
    required: false
  git_committer_email:
    description: "The email address for the “committer” field"
    default: "action@github.com"
    required: false
  ssh_public_signing_key:
    description: "The ssh public key used to sign commits"
    required: false
  ssh_private_signing_key:
    description: "The ssh private key used to sign commits"
    required: false

  # `semantic-release version` command line options
  prerelease:
    type: string
    required: false
    description: |
      Force the next version to be a prerelease. Set to "true" or "false".
    default: "false"

  prerelease_token:
    type: string
    required: false
    description: "Force the next version to use this prerelease token, if it is a prerelease"

  force:
    type: string
    required: false
    description: |
      Force the next version to be a major release. Must be set to
      one of "patch", "minor", or "major".

  commit:
    type: string
    required: false
    default: "true"
    description: Whether or not to commit changes locally

  push:
    type: string
    required: false
    default: "true"
    description: |
      Whether or not to push local commits to the Git repository.
      Defaults to "true", but when the "commit" input is "false"
      this will also be set to "false" regardless of the value
      supplied.

  changelog:
    type: string
    required: false
    default: "true"
    description: |
      Whether or not to update the changelog.

  vcs_release:
    type: string
    required: false
    default: "true"
    description: |
      Whether or not to create a release in the remote VCS, if supported

  build_metadata:
    type: string
    required: false
    description: |
      Build metadata to append to the new version

outputs:
  released:
    value: ${{ steps.semrel.outputs.released }}
    description: |
      "true" if a release was made, "false" otherwise

  version:
    value: ${{ steps.semrel.outputs.released }}
    description: |
      The newly released version if one was made, otherwise the current version

  tag:
    value: ${{ steps.semrel.outputs.tag }}
    description: |
      The Git tag corresponding to the version output

runs:
  using: "composite"
  steps:
    - run: echo "${{ github.action_path }}" >> $GITHUB_PATH
      shell: bash
    - run: |
        python -m venv ~/semantic-release/.venv
        source ~/semantic-release/.venv/bin/activate
        pip install python-semantic-release
        semantic-release --help
      shell: bash
    - run: action.sh
      id: semrel
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.github_token }}
        GIT_COMMITTER_NAME: ${{ inputs.git_committer_name }}
        GIT_COMMITTER_EMAIL: ${{ inputs.git_committer_email }}
        SSH_PRIVATE_SIGNING_KEY: ${{ inputs.ssh_private_signing_key }}
        SSH_PUBLIC_SIGNING_KEY: ${{ inputs.ssh_public_signing_key }}
        ROOT_OPTIONS: ${{ inputs.root_options }}
        PRERELEASE: ${{ inputs.prerelease }}
        COMMIT: ${{ inputs.commit }}
        PUSH: ${{ inputs.push }}
        CHANGELOG: ${{ inputs.changelog }}
        VCS_RELEASE: ${{ inputs.vcs_release }}
        FORCE: ${{ inputs.force }}
        BUILD_METADATA: ${{ inputs.build_metadata }}
        DIRECTORY: ${{ inputs.directory }}
