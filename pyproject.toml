# Ref: https://packaging.python.org/en/latest/specifications/declaring-project-metadata/
# and https://setuptools.pypa.io/en/latest/userguide/pyproject_config.html
[build-system]
requires = ["setuptools>=61.0.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "python-semantic-release"
version = "9.3.1"
description = "Automatic Semantic Versioning for Python projects"
requires-python = ">=3.8"
license = { text = "MIT" }
classifiers = [
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
]
readme = "README.rst"
authors = [{ name = "Rolf Erik Lekang", email = "me@rolflekang.com" }]
dependencies = [
  "click>=8,<9",
  "click-option-group~=0.5",
  "gitpython>=3.0.8,<4",
  "requests>=2.25,<3",
  "jinja2>=3.1.2,<4",
  "python-gitlab>=2,<5",
  "tomlkit~=0.11",
  "dotty-dict>=1.3.0,<2",
  "importlib-resources>=5.7,<7",
  "pydantic>=2,<3",
  "rich>=12.5.1",
  "shellingham>=1.5.0.post1",
]

[project.scripts]
semantic-release = "semantic_release.cli:main"
psr = "semantic_release.cli:main"

[project.urls]
changelog = "https://github.com/python-semantic-release/python-semantic-release/blob/master/CHANGELOG.md"
documentation = "https://python-semantic-release.readthedocs.io"
homepage = "https://python-semantic-release.readthedocs.io"
issues = "https://github.com/python-semantic-release/python-semantic-release/issues"
repository = "http://github.com/python-semantic-release/python-semantic-release.git"

[project.optional-dependencies]
docs = [
  "Sphinx<=6.0.0",
  "sphinxcontrib-apidoc==0.3.0",
  "sphinx-autobuild==2021.03.14",
  "furo>=2023.3.27",
]
test = [
  "coverage[toml]>=6,<8",
  "pytest>=7,<8",
  "pytest-env~=1.0",
  "pytest-xdist>=2,<4",
  "pytest-mock>=3,<4",
  "pytest-lazy-fixture~=0.6.3",
  "pytest-cov>=4,<5",
  "pytest-pretty>=1.2.0,<2",
  "pytest-clarity>=1.0.1",
  "responses==0.23.3",
  "requests-mock>=1.10.0,<2",
  "types-pytest-lazy-fixture>=0.6.3.3",
]
dev = ["pre-commit", "tox", "ruff==0.3.4"]
mypy = ["mypy", "types-requests"]

[tool.pytest.ini_options]
env = [
  "PYTHONHASHSEED = 123456"
]
addopts = [
  "-nauto",
  "-ra",
  "--diff-symbols",
  "--cache-clear",
  "--cov=semantic_release",
  "--cov-context=test",
  "--cov-report",
  "html:coverage-html",
  "--cov-report",
  "term",
]
python_files = ["tests/test_*.py", "tests/**/test_*.py"]

[tool.coverage.html]
show_contexts = true

[tool.coverage.run]
omit = ["*/tests/*"]

[tool.bandit]
targets = ["semantic_release"]

[tool.tox]
legacy_tox_ini = """
[tox]
envlist =
    mypy,
    py{38,39,310,311,312},
    coverage
    ruff
skipsdist = True

[testenv]
passenv = CI
setenv =
    PYTHONPATH = {toxinidir}
    TESTING = True
deps = .[test]
commands =
    coverage run -p --source=semantic_release -m pytest {posargs:tests}

[testenv:mypy]
deps = .[mypy]
commands =
    mypy semantic_release

[testenv:coverage]
deps = coverage[toml]
commands =
    coverage combine
    coverage report -m
    coverage xml

[testenv:ruff]
deps = .[dev]
commands =
    ruff check . --statistics --output-format=text
"""

[tool.mypy]
python_version = "3.8"
packages = ["semantic_release"]
show_column_numbers = true
show_error_context = true
pretty = true
error_summary = true
follow_imports = "normal"
ignore_missing_imports = true   # gitpython is very dynamic
disallow_untyped_calls = true
# warn_return_any = true
strict_optional = true
warn_no_return = true
warn_redundant_casts = true
# warn_unused_ignores = true
warn_unused_configs = true
# warn_unreachable = true
disallow_untyped_defs = true
check_untyped_defs = true
cache_dir = "/dev/null"
plugins = ["pydantic.mypy"]

[[tool.mypy.overrides]]
module = "tests.*"
allow_untyped_defs = true
allow_incomplete_defs = true
allow_untyped_calls = true

[tool.ruff]
line-length = 88
target-version = "py38"
force-exclude = true
output-format = "grouped"
show-fixes = true
src = ["semantic_release", "tests"]

[tool.ruff.lint]
select = ["ALL"]

# See https://docs.astral.sh/ruff/rules/
# for any of these codes you can also run `ruff rule [CODE]`
# which explains it in the terminal
ignore = [
  # attribute shadows builtin (e.g. Foo.list())
  "A003",
  # Annotations (flake8-annotations)
  # missing "self" type-hint
  "ANN101",
  "ANN102",
  "ANN401",
  # flake8-bugbear
  "B019",
  # flake8-commas
  "COM",
  # Missing docstrings - eventually want to enable
  "D100",
  "D101",
  "D102",
  "D103",
  "D104",
  "D105",
  "D107",

  "D203",
  "D205",
  "D212",
  "D400",
  "D401",
  "D404",
  "D415",
  # flake8-datetimez
  "DTZ",
  # flake8-errmsg
  "EM",
  # don't compare types, use isinstance()
  # sometimes using type(x) == y is deliberately chosen to exclude
  # subclasses
  "E721",
  # flake8-fixme
  "FIX",
  # flake8-boolean-trap
  "FBT",
  # No implicit packages
  "INP001",
  # Errors should end with "Error"
  "N818",
  # Fixtures that do not return a value need an underscore prefix.  The rule
  # does not handle generators.
  "PT004",
  # flake8-pytest-style, values rowtype (list|tuple)
  "PT007",
  # pytest.raises needs a match - eventually want to enable
  "PT011",
  "PT012",
  "PT013",
  # pylint
  "PLR",
  "PLE1507",
  # flake8-use-pathlib
  "PTH",
  # flake8-raise
  "RSE",
  # ruff
  # This seems to flag a load of false-positives, thinking that the # noqa's are
  # unneeded and trying to fix them even though ruff then flags the errors that
  # were previously ignored
  "RUF100",
  # flake8-todos
  "TD002",
  "TD003",
  # tryceratops
  "TRY003",
  "TRY401",

  # other errors that conflict with ruff format
  # indentation-with-invalid-multiple
  "W191",
  "E111",
  "E114",
  "E117",
  "E501",
  "D206",
  "D300",
  "Q000",
  "Q001",
  "Q002",
  "Q003",
  "COM812",
  "COM812",
  "ISC001",
  "ISC002",
]

external = ["V"]
ignore-init-module-imports = true
task-tags = ["NOTE", "TODO", "FIXME", "XXX"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "lf"

[tool.ruff.lint.per-file-ignores]
# Imported but unused
"__init__.py" = ["F401"]
# pydantic 1 can't handle __future__ annotations-enabled syntax on < 3.10
"semantic_release/cli/config.py" = ["UP", "TCH"]
"semantic_release/commit_parser/*" = ["UP", "FA", "TCH"]
# Method argument not used. This is mostly a base class
# anyway
"semantic_release/hvcs/_base.py" = ["ARG002"]
# from tests.fixtures import * is deliberate
"tests/conftest.py" = ["F403"]
"tests/fixtures/**/__init__.py" = ["F403"]

"tests/*" = [
  # unused arguments - likely fixtures to be moved to
  # @pytest.mark.usefixtures
  "ARG001",
  # "assert" used
  "S101",
  # possible hard-coded password assigned to argument
  # because we use "prerelease_token=..." and bandit panics
  # when it sees *_token variables
  "S105",
  "S106",
  "S107",
  # pseudo-random generators not suitable for cryptographic purposes
  # (e.g. random.choice used)
  "S311",
  # Private member access
  "SLF001",
  # Annotations
  "ANN",
  # Using format instead of f-string for readablity
  "UP032"
]


[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.flake8-implicit-str-concat]
allow-multiline = true

[tool.ruff.lint.flake8-quotes]
inline-quotes = "double"
multiline-quotes = "double"

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.flake8-type-checking]
strict = true

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false
parametrize-names-type = "csv"

[tool.ruff.lint.isort]
# required-imports = ["from __future__ import annotations"]
combine-as-imports = true
known-first-party = ["semantic_release"]
forced-separate = ["tests"]
relative-imports-order = "closest-to-furthest"
section-order = [
  "future",
  "standard-library",
  "third-party",
  "first-party",
  "tests",
  "local-folder",
]
sections = { "tests" = ["tests"] }

[tool.vulture]
ignore_names = ["change_to_ex_proj_dir", "init_example_project"]

[tool.semantic_release]
logging_use_named_masks = true
tag_format = "v{version}"
commit_parser = "angular"
commit_author = "semantic-release <semantic-release>"
commit_message = "{version}\n\nAutomatically generated by python-semantic-release"
build_command = """
    python -m pip install build~=0.10.0
    python -m build .
"""
major_on_zero = true
assets = []
version_variables = ["semantic_release/__init__.py:__version__"]
version_toml = ["pyproject.toml:project.version"]

[tool.semantic_release.commit_parser_options]
allowed_tags = [
  "build",
  "chore",
  "ci",
  "docs",
  "feat",
  "fix",
  "perf",
  "style",
  "refactor",
  "test",
]
minor_tags = ["feat"]
patch_tags = ["fix", "perf"]

[tool.semantic_release.changelog]
template_dir = "templates"
changelog_file = "CHANGELOG.md"
exclude_commit_patterns = []

[tool.semantic_release.changelog.environment]
block_start_string = "{%"
block_end_string = "%}"
variable_start_string = "{{"
variable_end_string = "}}"
comment_start_string = "{#"
comment_end_string = "#}"
trim_blocks = false
lstrip_blocks = false
newline_sequence = "\n"
keep_trailing_newline = false
extensions = []
autoescape = true

[tool.semantic_release.branches.main]
match = "(main|master)"
prerelease = false
prerelease_token = "rc"

[tool.semantic_release.branches."8.0.x"]
match = "8.0.x"
prerelease = true
prerelease_token = "rc"

[tool.semantic_release.remote]
name = "origin"
type = "github"
ignore_token_for_push = false
token = { env = "GH_TOKEN" }

[tool.semantic_release.publish]
dist_glob_patterns = ["dist/*"]
upload_to_vcs_release = true
