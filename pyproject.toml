# Ref: https://packaging.python.org/en/latest/specifications/declaring-project-metadata/
# and https://setuptools.pypa.io/en/latest/userguide/pyproject_config.html

[build-system]
requires = ["setuptools>=61.0.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "python-semantic-release"
version = "8.0.4"
description = "Automatic Semantic Versioning for Python projects"
requires-python = ">=3.7"
license = { text = "MIT" }
classifiers = [
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.7",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
]
readme = "README.rst"
authors = [{ name = "Rolf Erik Lekang", email = "me@rolflekang.com" }]
dependencies = [
  "click>=8,<9",
  "gitpython>=3.0.8,<4",
  "requests>=2.25,<3",
  "jinja2>=3.1.2,<4",
  "python-gitlab>=2,<4",
  "tomlkit~=0.10",
  "dotty-dict>=1.3.0,<2",
  "dataclasses==0.8; python_version < '3.7.0'",
  "importlib-resources==5.7",
  "pydantic>=1.10.2,<2",
  "rich>=12.5.1",
  "shellingham>=1.5.0.post1",
]

[project.scripts]
semantic-release = "semantic_release.cli:main"
psr = "semantic_release.cli:main"

[project.urls]
"Project Url" = "http://github.com/python-semantic-release/python-semantic-release"
Homepage = "https://python-semantic-release.readthedocs.io"

[project.optional-dependencies]
docs = [
  "Sphinx<=6.0.0",
  "sphinxcontrib-apidoc==0.3.0",
  "sphinx-autobuild==2021.03.14",
  "furo>=2023.3.27",
]
test = [
  "coverage[toml]>=6,<7",
  "pytest>=7,<8",
  "pytest-xdist>=2,<3",
  "pytest-mock>=3,<4",
  "pytest-lazy-fixture~=0.6.3",
  "pytest-cov>=4,<5",
  "responses==0.21.0",
  "requests-mock>=1.10.0,<2",
  "types-pytest-lazy-fixture>=0.6.3.3",
]
dev = ["pre-commit", "tox", "black", "ruff>=0.0.282"]
mypy = ["mypy", "types-requests"]

[tool.pytest.ini_options]
addopts = [
  "-nauto",
  "-ra",
  "--cache-clear",
  "--cov=semantic_release",
  "--cov-report",
  "html:coverage-html",
  "--cov-report",
  "term",
]
python_files = ["tests/test_*.py", "tests/**/test_*.py"]

[tool.coverage.run]
omit = ["*/tests/*"]

[tool.bandit]
targets = ["semantic_release"]

[tool.tox]
legacy_tox_ini = """
[tox]
envlist =
    mypy,
    py{37,38,39,310,311},
    coverage
skipsdist = True

[testenv]
passenv = CI
setenv =
    PYTHONPATH = {toxinidir}
    TESTING = True
    PYTHONHASHSEED = 123456
deps = .[test]
commands =
    coverage run -p --source=semantic_release -m pytest -v {posargs:tests}

[testenv:mypy]
deps = .[mypy]
commands =
    mypy semantic_release

[testenv:coverage]
deps = coverage[toml]
commands =
    coverage combine
    coverage report -m
    coverage xml
"""

[tool.mypy]
python_version = 3.7
packages = ["semantic_release"]
show_column_numbers = true
show_error_context = true
pretty = true
error_summary = true
follow_imports = "normal"
ignore_missing_imports = true   # gitpython is very dynamic
disallow_untyped_calls = true
# warn_return_any = true
strict_optional = true
warn_no_return = true
warn_redundant_casts = true
# warn_unused_ignores = true
warn_unused_configs = true
# warn_unreachable = true
disallow_untyped_defs = true
check_untyped_defs = true
cache_dir = "/dev/null"
plugins = ["pydantic.mypy"]

[[tool.mypy.overrides]]
module = "tests.*"
allow_untyped_defs = true
allow_incomplete_defs = true
allow_untyped_calls = true

[tool.ruff]
target-version = "py37"
force-exclude = true
line-length = 88
format = "grouped"
ignore-init-module-imports = true
show-source = true
show-fixes = true
src = ["semantic_release", "tests"]
task-tags = ["NOTE", "TODO", "FIXME", "XXX"]

[tool.ruff.per-file-ignores]
# Imported but unused
"__init__.py" = ["F401"]

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.flake8-implicit-str-concat]
allow-multiline = true

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.flake8-type-checking]
strict = true

[tool.ruff.isort]
required-imports = ["from __future__ import annotations"]
combine-as-imports = true
known-first-party = ["semantic_release"]
forced-separate = ["tests"]
relative-imports-order = "closest-to-furthest"
section-order = [
  "future",
  "standard-library",
  "third-party",
  "first-party",
  "tests",
  "local-folder",
]
sections = { "tests" = ["tests"] }

[tool.semantic_release]
logging_use_named_masks = true
tag_format = "v{version}"
commit_parser = "angular"
commit_author = "semantic-release <semantic-release>"
commit_message = "{version}\n\nAutomatically generated by python-semantic-release"
build_command = """
    python -m pip install build~=0.10.0
    python -m build .
"""
major_on_zero = true
assets = []
version_variables = ["semantic_release/__init__.py:__version__"]
version_toml = ["pyproject.toml:project.version"]

[tool.semantic_release.commit_parser_options]
allowed_tags = [
  "build",
  "chore",
  "ci",
  "docs",
  "feat",
  "fix",
  "perf",
  "style",
  "refactor",
  "test",
]
minor_tags = ["feat"]
patch_tags = ["fix", "perf"]

[tool.semantic_release.changelog]
template_dir = "templates"
changelog_file = "CHANGELOG.md"
exclude_commit_patterns = []

[tool.semantic_release.changelog.environment]
block_start_string = "{%"
block_end_string = "%}"
variable_start_string = "{{"
variable_end_string = "}}"
comment_start_string = "{#"
comment_end_string = "#}"
trim_blocks = false
lstrip_blocks = false
newline_sequence = "\n"
keep_trailing_newline = false
extensions = []
autoescape = true

[tool.semantic_release.branches.main]
match = "(main|master)"
prerelease = false
prerelease_token = "rc"

[tool.semantic_release.branches."8.0.x"]
match = "8.0.x"
prerelease = true
prerelease_token = "rc"

[tool.semantic_release.remote]
name = "origin"
type = "github"
ignore_token_for_push = false
token = { env = "GH_TOKEN" }

[tool.semantic_release.publish]
dist_glob_patterns = ["dist/*"]
upload_to_vcs_release = true
