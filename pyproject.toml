# Ref: https://packaging.python.org/en/latest/specifications/declaring-project-metadata/
# and https://setuptools.pypa.io/en/latest/userguide/pyproject_config.html
[build-system]
requires = ["setuptools>=61.0.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "python-semantic-release"
version = "8.0.0-alpha.1"
description = "Automatic Semantic Versioning for Python projects"
requires-python = ">=3.7"
license = { text = "MIT" }
classifiers = [
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.7",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
]
readme = "README.rst"
authors = [{ name = "Rolf Erik Lekang", email = "me@rolflekang.com" }]
dependencies = [
  "click>=7,<9",
  "gitpython>=3.0.8,<4",
  "twine>=4,<5",
  "requests>=2.25,<3",
  "wheel",
  "jinja2>=3.1.2,<4",
  "python-gitlab>=2,<4",
  "tomlkit~=0.10",
  "dotty-dict>=1.3.0,<2",
  "dataclasses==0.8; python_version < '3.7.0'",
  "importlib-resources==5.7",
  "pydantic>=1.10.2,<2",
]

[project.scripts]
semantic-release = "semantic_release.cli:main"

[project.urls]
"Project Url" = "http://github.com/python-semantic-release/python-semantic-release"
Homepage = "https://python-semantic-release.readthedocs.io"

[project.optional-dependencies]
test = [
  "coverage[toml]>=6,<7",
  "pytest>=7,<8",
  "pytest-xdist>=2,<3",
  "pytest-mock>=3,<4",
  "pytest-lazy-fixture~=0.6.3",
  "pytest-cov>=4,<5",
  "responses==0.21.0",
  "requests-mock>=1.10.0,<2",
]
docs = ["Sphinx==5.2.3", "sphinxcontrib-apidoc==0.3.0"]
dev = ["tox", "isort", "black"]
mypy = ["mypy", "types-requests"]

[tool.pytest.ini_options]
addopts = [
  "-ra",
  "--cache-clear",
  "--cov=semantic_release",
  "--cov-report",
  "html:coverage-html",
  "--cov-report",
  "term",
]
python_files = ["tests/test_*.py", "tests/**/test_*.py"]

[tool.coverage.run]
omit = ["*/tests/*"]

[tool.isort]
profile = "black"
skip = [".tox", "venv"]
combine_as_imports = true
group_by_package = true
default_section = "THIRDPARTY"
known_first_party = ["semantic_release"]
known_tests = ["tests"]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
line_length = 88
sections = [
  "FUTURE",
  "STDLIB",
  "THIRDPARTY",
  "FIRSTPARTY",
  "TESTS",
  "LOCALFOLDER",
]

[tool.tox]
legacy_tox_ini = """
[tox]
envlist =
    mypy,
    py{37,38,39,310},
    coverage
skipsdist = True

[testenv]
passenv = CI
setenv =
    PYTHONPATH = {toxinidir}
    TESTING = True
deps = .[test]
commands =
    coverage run -p --source=semantic_release -m pytest -v {posargs:tests}

[testenv:mypy]
deps = .[mypy]
commands =
    mypy --ignore-missing-imports semantic_release

[testenv:coverage]
deps = coverage[toml]
commands =
    coverage combine
    coverage report -m
    coverage xml
"""

[tool.semantic_release]
logging_use_named_masks = true
tag_format = "v{version}"
commit_parser = "angular"
commit_author = "semantic-release <semantic-release>"
commit_message = "{version}\n\nAutomatically generated by python-semantic-release"
build_command = "python setup.py sdist bdist_wheel"
major_on_zero = true
assets = []
version_variables = ["semantic_release/__init__.py:__version__"]
version_toml = ["pyproject.toml:project.version"]

[tool.semantic_release.commit_parser_options]
allowed_tags = [
  "build",
  "chore",
  "ci",
  "docs",
  "feat",
  "fix",
  "perf",
  "style",
  "refactor",
  "test",
]
minor_tags = ["feat"]
patch_tags = ["fix", "perf"]

[tool.semantic_release.changelog]
template_dir = "templates"
changelog_file = "CHANGELOG.md"
exclude_commit_patterns = []

[tool.semantic_release.changelog.environment]
block_start_string = "{%"
block_end_string = "%}"
variable_start_string = "{{"
variable_end_string = "}}"
comment_start_string = "{#"
comment_end_string = "#}"
trim_blocks = false
lstrip_blocks = false
newline_sequence = "\n"
keep_trailing_newline = false
extensions = []
autoescape = true

[tool.semantic_release.branches.main]
match = "(main|master)"
prerelease = false
prerelease_token = "rc"

[tool.semantic_release.branches."8.0.x"]
match = "8.0.x"
prerelease = true
prerelease_token = "alpha"

[tool.semantic_release.remote]
name = "origin"
type = "github"
ignore_token_for_push = true
token = { env = "GH_TOKEN" }

[tool.semantic_release.upload]
dist_glob_patterns = ["dist/*"]
upload_to_repository = false
upload_to_vcs_release = false
sign = false
sign_with = "gpg"
config_file = "~/.pypirc"
skip_existing = false
repository_name = "testpypi"
disable_progress_bar = false

[tool.semantic_release.upload.pypi_token]
env = "PYPI_TOKEN"

[tool.semantic_release.upload.identity]
env = "GPG_IDENTITIY"

[tool.semantic_release.upload.username]
env = "REPOSITORY_USERNAME"
default_env = "TWINE_USERNAME"

[tool.semantic_release.upload.password]
env = "REPOSITORY_PASSWORD"
default_env = "TWINE_PASSWORD"

[tool.semantic_release.upload.non_interactive]
env = "TWINE_NON_INTERACTIVE"
default = "true"

[tool.semantic_release.upload.cacert]
env = "TWINE_CERT"

[tool.semantic_release.upload.client_cert]
env = "TWINE_CLIENT_CERT"

[tool.semantic_release.upload.repository_url]
env = "REPOSITORY_URL"
default_env = "TWINE_REPOSITORY_URL"
