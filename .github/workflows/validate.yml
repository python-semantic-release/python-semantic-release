---
name: Validation Pipeline

on:
  # Enable workflow as callable from another workflow
  workflow_call:
    inputs:
      python-versions-linux:
        description: 'Python versions to test on Linux (JSON array)'
        required: true
        type: string
      python-versions-windows:
        description: 'Python versions to test on Windows (JSON array)'
        required: true
        type: string
      files-changed:
        description: 'Boolean string result for if any files have changed'
        type: string
        required: false
        default: 'false'
      build-files-changed:
        description: 'Boolean string result for if build files have changed'
        type: string
        required: false
        default: 'false'
      ci-files-changed:
        description: 'Boolean string result for if CI files have changed'
        type: string
        required: false
        default: 'false'
      doc-files-changed:
        description: 'Boolean string result for if documentation files have changed'
        type: string
        required: false
        default: 'false'
      src-files-changed:
        description: 'Boolean string result for if source files have changed'
        type: string
        required: false
        default: 'false'
      test-files-changed:
        description: 'Boolean string result for if test files have changed'
        type: string
        required: false
        default: 'false'
    outputs:
      new-release-detected:
        description: Boolean string result for if new release is available
        value: ${{ jobs.build.outputs.new-release-detected }}
      new-release-version:
        description: Version string for the new release
        value: ${{ jobs.build.outputs.new-release-version }}
      new-release-tag:
        description: Tag string for the new release
        value: ${{ jobs.build.outputs.new-release-tag }}
      new-release-is-prerelease:
        description: Boolean string result for if new release is a pre-release
        value: ${{ jobs.build.outputs.new-release-is-prerelease }}
      distribution-artifacts:
        description: Artifact Download name for the distribution artifacts
        value: ${{ jobs.build.outputs.distribution-artifacts }}
    # secrets: none required ATT


# set default Token permissions = none
permissions: {}


env:
  LOWEST_PYTHON_VERSION: '3.8'
  COMMON_PYTHON_VERSION: '3.11'


jobs:

  build:
    name: Build
    runs-on: ubuntu-latest
    if: ${{ inputs.build-files-changed == 'true' || inputs.src-files-changed == 'true' || inputs.test-files-changed == 'true' || inputs.ci-files-changed == 'true' }}

    steps:
      - name: Setup | Checkout Repository at workflow sha
        uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}
          fetch-depth: 0

      - name: Setup | Force correct release branch on workflow sha
        run: |
          git checkout -B ${{ github.ref_name }}

      - name: Setup | Install Python ${{ env.COMMON_PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.COMMON_PYTHON_VERSION }}
          cache: 'pip'

      - name: Setup | Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -e .[build]

      - name: Build | Build next version artifacts
        id: version
        uses: python-semantic-release/python-semantic-release@v9.21.0
        with:
          github_token: ""
          root_options: "-v"
          build: true
          changelog: true
          commit: false
          push: false
          tag: false
          vcs_release: false

      - name: Build | Annotate next version
        if: steps.version.outputs.released == 'true'
        run: |
          printf '%s\n' "::notice::Next release will be '${{ steps.version.outputs.tag }}'"

      - name: Build | Create non-versioned distribution artifact
        if: steps.version.outputs.released == 'false'
        run: python -m build .

      - name: Build | Set distribution artifact variables
        id: build
        run: |
          printf '%s\n' "dist_dir=dist/*" >> $GITHUB_OUTPUT
          printf '%s\n' "artifacts_name=dist" >> $GITHUB_OUTPUT

      - name: Upload | Distribution Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.build.outputs.artifacts_name }}
          path: ${{ steps.build.outputs.dist_dir }}
          if-no-files-found: error
          retention-days: 2

    outputs:
      new-release-detected: ${{ steps.version.outputs.released }}
      new-release-version: ${{ steps.version.outputs.version }}
      new-release-tag: ${{ steps.version.outputs.tag }}
      new-release-is-prerelease: ${{ steps.version.outputs.is_prerelease }}
      distribution-artifacts: ${{ steps.build.outputs.artifacts_name }}


  unit-test:
    name: Unit Tests
    if: ${{ inputs.src-files-changed == 'true' || inputs.test-files-changed == 'true' || inputs.ci-files-changed == 'true' }}
    runs-on: ubuntu-latest

    steps:
      - name: Setup | Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}
          fetch-depth: 1

      - name: Setup | Install Python ${{ env.LOWEST_PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.LOWEST_PYTHON_VERSION }}
          cache: 'pip'

      - name: Setup | Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -e .[test]
          pip install pytest-github-actions-annotate-failures

      - name: Test | Run pytest -m unit --comprehensive
        id: tests
        run: |
          pytest                        \
            -vv                         \
            -nauto                      \
            -m unit                     \
            --comprehensive             \
            --cov=semantic_release      \
            --cov-context=test          \
            --cov-report=term-missing   \
            --cov-fail-under=60         \
            --junit-xml=tests/reports/pytest-results.xml

      - name: Report | Upload Test Results
        uses: mikepenz/action-junit-report@v5.4.0
        if: ${{ always() && steps.tests.outcome != 'skipped' }}
        with:
          report_paths: ./tests/reports/*.xml
          annotate_only: true


  test-linux:
    name: Python ${{ matrix.python-version }} on ${{ matrix.os }} E2E tests
    runs-on: ${{ matrix.os }}
    needs:
      - build
      - unit-test
    if: ${{ inputs.src-files-changed == 'true' || inputs.test-files-changed == 'true' || inputs.ci-files-changed == 'true' }}
    strategy:
      matrix:
        python-version: ${{ fromJson(inputs.python-versions-linux) }}
        os:
          - ubuntu-latest

    steps:
      - name: Setup | Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}
          fetch-depth: 1

      - name: Setup | Install Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Setup | Download Distribution Artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build.outputs.distribution-artifacts }}
          path: ./dist

      - name: Setup | Install dependencies
        id: install
        # To ensure we are testing our installed package (not the src code), we must
        # uninstall the editable install (symlink) first then install the distribution artifact.
        # Lastly, we ask python to give us the installation location of our distribution artifact
        # so that we can use it in the pytest command for coverage
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -e .[test]
          pip install pytest-github-actions-annotate-failures
          pip uninstall -y python-semantic-release
          pip install dist/python_semantic_release-*.whl
          python -c 'import pathlib, semantic_release; print(f"PKG_INSTALLED_DIR={pathlib.Path(semantic_release.__file__).resolve().parent}")' >> $GITHUB_OUTPUT

      - name: Test | Run pytest -m e2e --comprehensive
        id: tests
        run: |
          pytest                                                   \
            -vv                                                    \
            -nauto                                                 \
            -m e2e                                                 \
            --comprehensive                                        \
            --cov=${{ steps.install.outputs.PKG_INSTALLED_DIR }}   \
            --cov-context=test                                     \
            --cov-report=term-missing                              \
            --cov-fail-under=70                                    \
            --junit-xml=tests/reports/pytest-results.xml

      - name: Report | Upload Cached Repos on Failure
        uses: actions/upload-artifact@v4
        if: ${{ failure() && steps.tests.outcome == 'failure' }}
        with:
          name: ${{ format('cached-repos-{0}-{1}', matrix.os, matrix.python-version) }}
          path: .pytest_cache/d/psr-*
          include-hidden-files: true
          if-no-files-found: error
          retention-days: 1

      - name: Report | Upload Tested Repos on Failure
        uses: actions/upload-artifact@v4
        if: ${{ failure() && steps.tests.outcome == 'failure' }}
        with:
          name: ${{ format('tested-repos-{0}-{1}', matrix.os, matrix.python-version) }}
          path: /tmp/pytest-of-runner/pytest-current/*
          include-hidden-files: true
          if-no-files-found: error
          retention-days: 1

      - name: Report | Upload Test Results
        uses: mikepenz/action-junit-report@v5.4.0
        if: ${{ always() && steps.tests.outcome != 'skipped' }}
        with:
          report_paths: ./tests/reports/*.xml
          annotate_only: true


  test-windows:
    name: Python ${{ matrix.python-version }} on ${{ matrix.os }} E2E tests
    runs-on: ${{ matrix.os }}
    needs:
      - build
      - unit-test
    if: ${{ inputs.src-files-changed == 'true' || inputs.test-files-changed == 'true' || inputs.ci-files-changed == 'true' }}
    strategy:
      matrix:
        python-version: ${{ fromJson(inputs.python-versions-windows) }}
        os: [windows-latest]

    steps:
      - name: Setup | Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}
          fetch-depth: 1

      - name: Setup | Install Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Setup | Download Distribution Artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build.outputs.distribution-artifacts }}
          path: dist

      - name: Setup | Install dependencies
        id: install
        # To ensure we are testing our installed package (not the src code), we must
        # uninstall the editable install (symlink) first then install the distribution artifact.
        # Lastly, we ask python to give us the installation location of our distribution artifact
        # so that we can use it in the pytest command for coverage
        shell: pwsh
        run: |
          $ErrorActionPreference = 'stop'
          python -m pip install --upgrade pip setuptools wheel
          pip install -e .[test]
          pip install pytest-github-actions-annotate-failures
          pip uninstall -y python-semantic-release
          $psrWheelFile = Get-ChildItem dist\python_semantic_release-*.whl -File | Select-Object -Index 0
          pip install "$psrWheelFile"
          python -c 'import pathlib, semantic_release; print(f"PKG_INSTALLED_DIR={pathlib.Path(semantic_release.__file__).resolve().parent}")' | Tee-Object -Variable cmdOutput
          echo $cmdOutput >> $env:GITHUB_OUTPUT

      - name: Test | Run pytest -m e2e
        id: tests
        shell: pwsh
        # env:
          # Required for GitPython to work on Windows because of getpass.getuser()
          # USERNAME: "runneradmin"
          # Because GHA is currently broken on Windows to pass these varables, we do it manually
        run: |
          $env:USERNAME = "runneradmin"
          pytest                                                    `
            -vv                                                     `
            -nauto                                                  `
            -m e2e                                                  `
            `--cov=${{ steps.install.outputs.PKG_INSTALLED_DIR }}   `
            `--cov-context=test                                     `
            `--cov-report=term-missing                              `
            `--junit-xml=tests/reports/pytest-results.xml

      - name: Report | Upload Cached Repos on Failure
        uses: actions/upload-artifact@v4
        if: ${{ failure() && steps.tests.outcome == 'failure' }}
        with:
          name: ${{ format('cached-repos-{0}-{1}', matrix.os, matrix.python-version) }}
          path: .pytest_cache/d/psr-*
          include-hidden-files: true
          if-no-files-found: error
          retention-days: 1

      - name: Report | Upload Tested Repos on Failure
        uses: actions/upload-artifact@v4
        if: ${{ failure() && steps.tests.outcome == 'failure' }}
        with:
          name: ${{ format('tested-repos-{0}-{1}', matrix.os, matrix.python-version) }}
          path: ~/AppData/Local/Temp/pytest-of-runneradmin/pytest-current/*
          include-hidden-files: true
          if-no-files-found: error
          retention-days: 1

      - name: Report | Upload Test Results
        uses: mikepenz/action-junit-report@v5.4.0
        if: ${{ always() && steps.tests.outcome != 'skipped' }}
        with:
          report_paths: ./tests/reports/*.xml
          annotate_only: true


  lint:
    name: Lint
    if: ${{ inputs.files-changed == 'true' }}
    runs-on: ubuntu-latest

    steps:
      - name: Setup | Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}
          fetch-depth: 1

      - name: Setup | Install Python ${{ env.COMMON_PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.COMMON_PYTHON_VERSION }}
          cache: 'pip'

      - name: Setup | Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -e .[dev,mypy,test]
        # needs test because we run mypy over the tests as well and without the dependencies
        # mypy will throw import errors

      - name: Lint | Ruff Evaluation
        id: lint
        run: |
          ruff check \
            --config pyproject.toml \
            --output-format=full \
            --exit-non-zero-on-fix

      - name: Type-Check | MyPy Evaluation
        id: type-check
        if: ${{ always() && steps.lint.outcome != 'skipped' }}
        run: |
          mypy .

      - name: Format-Check | Ruff Evaluation
        id: format-check
        if: ${{ always() && steps.type-check.outcome != 'skipped' }}
        run: |
          ruff format --check --config pyproject.toml
